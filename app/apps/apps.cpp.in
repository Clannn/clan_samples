#include "apps.h"

@SAMPLE_INCLUDE_FILES@

namespace apps
{
std::vector<AppInfo> apps = {
@APP_INFO_LIST@
};

std::vector<SampleInfo> samples = {
@SAMPLE_INFO_LIST@
};

AppInfo *get_app(const std::string &id)
{
	for (auto &app : apps)
	{
		if (app.id == id)
		{
			return &app;
		}
	}

	return nullptr;
}

std::vector<AppInfo *> get_apps()
{
	std::vector<AppInfo *> app_ptrs;

	for (auto &app : apps)
	{
		app_ptrs.push_back(&app);
	}

	return app_ptrs;
}

std::vector<AppInfo *> get_samples(const std::vector<std::string> &categories, const std::vector<std::string> &tags)
{
	std::vector<AppInfo *> app_ptrs;

	for (auto &app : samples)
	{
		app_ptrs.push_back(&app);
	}

	// No filters
	if (categories.empty() && tags.empty())
	{
		return app_ptrs;
	}

	std::vector<AppInfo *> filtered;

	for (auto app : app_ptrs)
	{
		auto *sample = reinterpret_cast<SampleInfo *>(app);

		bool selected = false;

		// Sample is in one of the desired categories
		for (auto &category : categories)
		{
			if (category == sample->category)
			{
				selected = true;
				break;
			}
		}

		// Sample has one or more of the desired tags
		for (auto &tag : tags)
		{
			for (auto &s_tag : sample->tags)
			{
				if (s_tag == tag)
				{
					selected = true;
					break;
				}
			}
		}

		if (selected)
		{
			filtered.push_back(app);
		}
	}

	return filtered;
}

SampleInfo * get_sample(const std::string &id) {
	for (auto& sample : samples) {
		if (sample.id == id) {
			return &sample;
		}
	}
	return nullptr;
}

}        // namespace apps